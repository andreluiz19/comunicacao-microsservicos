COMANDOS DOCKER:

Banco de Dados AUTH:
docker run --name auth-db -p 5432:5432 -e POSTGRES_DB=auth-db -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=admin postgres:11
			     PC  :CONTAINER

Banco de Dados PRODUCT:
docker run --name product-db -p 5433:5432 -e POSTGRES_DB=product-db -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=admin postgres:11
								PC  :CONTAINER

// docker run --name sales-db -p 27017:27017 -p 28017:28017 -e MONGODB_USER="admin" -e MONGODB_DATABASE="sales-db" -e MONGODB_PASS="admin" tutum/mongodb

Banco de Dados SALES:
docker run --name sales-db -p 27017:27017 -p 28017:28017 mongo

Conexão no Mongosh
"mongodb://localhost:27017"

RabbitMQ:
docker run --name sales-rabbit -p 5672:5672 -p 25676:25676 -p 15672:15672 rabbitmq:3-management
user: guest pass: guest

STARTAR TODOS OS CONTAINERS COM DOCKER-COMPOSE:
docker-compose up --build

CRIAR A IMAGEM COM DOCKERFILE:
Auth-API:
docker image build -t auth-api .
docker run --name auth-api -p 8080:8080 auth-api

Sales-API:
docker image build -t sales-api .
docker run --name sales-api -e PORT=8082 -p 8082:8082 sales-api

Product-API:
docker image build -t product-api .
docker run --name product-api -p 8081:8081 product-api


STARTAR O SPRING:
gradle bootRun 


OUTROS COMANDOS GERAIS DOCKER:

docker container start {name || id}

docker container stop {name || id}

docker container prune -> Remove todos os containers

docker volume prune -> Remove todos os volumes

docker ps -a -> Listar todos os containers

docker logs --follow {name} -> Rastrear logs no container

docker image prune -> Remove todas as imagens não utilizadas
